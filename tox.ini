[tox]
envlist = py3{8,9,10,11}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm[toml]

[build]
deps =
    pip>=21.1
    build
    twine

[testenv]
skip_install = true

setenv =
    COVERAGE_FILE = .coverage.{envname}
    PYTHONPATH = {toxinidir}/src
    SELFTEST = True

passenv =
    SETUPTOOLS_SCM_DEBUG
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    {[base]deps}
    .[test,cov]

commands =
    python -m pytest {posargs:"-v"} tests/ --capture=fd --cov=ymltoxml --cov-branch --cov-report term-missing

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py38
    py39
    py310
    py311

[coverage:run]
parallel=True

[testenv:dev]
skip_install = true

setenv =
    DISABLE_MAVNATIVE = True
    MDEF_PATH = {envsitepackagesdir}/pymavlink/message_definitions/v1.0

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SETUPTOOLS_SCM_DEBUG

allowlist_externals =
    bash

deps =
    {[base]deps}
    pymavlink
    fuzzyset2
    -e .

commands =
    yagrep -h
    yagrep --version
    yagrep --dump-config

[testenv:conv]
skip_install = true

setenv =
    DISABLE_MAVNATIVE = True
    MDEF_PATH = {envsitepackagesdir}/pymavlink/message_definitions/v1.0

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SETUPTOOLS_SCM_DEBUG

allowlist_externals =
    bash

deps =
    {[base]deps}
    pymavlink
    -e .

commands =
    ymltoxml -h
    bash -c 'cp {env:MDEF_PATH}/{posargs:paparazzi}.xml in.xml'
    ymltoxml -i in.xml -o out.yaml
    ymltoxml -v out.yaml
    bash -c 'diff -u in.xml out.xml || true'
    ymltoxml --version
    ymltoxml --dump-config
    ymltoxml requirements.txt out.txt

[testenv:changes]
skip_install = true

allowlist_externals =
    {[testenv:conv]allowlist_externals}

passenv =
    {[testenv:conv]passenv}

deps =
    pip>=21.1
    https://github.com/sarnold/gitchangelog/releases/download/3.1.2/gitchangelog-3.1.2-py3-none-any.whl

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    .[doc]

commands = make -C docs html

[testenv:docs-clean]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[base]deps}
    .[doc]

commands = make -C docs/ clean

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[base]deps}
    .[doc]

commands = make -C docs linkcheck

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SETUPTOOLS_SCM_DEBUG

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
passenv = CI

deps =
    pip>=21.1

commands =
    pip install ymltoxml --force-reinstall --pre --prefer-binary -f dist/
    ymltoxml --version
    ymltoxml -d

[testenv:lint]
passenv =
    CI
    OS
    PYTHONIOENCODING

deps =
    {[base]deps}
    pylint
    -r requirements.txt

commands =
    pylint --fail-under=9.75 --suggestion-mode=True src/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 scripts/ src/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}/src

deps =
    {[base]deps}
    mypy
    munch-stubs
    -r requirements.txt

commands =
    stubgen -p nested_lookup --export-less -o {toxinidir}
    python -m mypy --follow-imports=normal --install-types --non-interactive src/

[testenv:black]
skip_install = true

deps =
    {[base]deps}
    black

commands =
    black -v -S src/ {posargs}

[testenv:isort]
skip_install = true

deps =
    {[base]deps}
    isort
    -r requirements.txt

commands =
    python -m isort scripts/ src/

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    bandit[toml]

commands =
    bandit -c pyproject.toml -r src/

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'rm -rf in.* out.* dist/ build/ docs/source/api/'
    bash -c 'rm -rf paparazzi.xml nested_lookup/ sorted-out/'
